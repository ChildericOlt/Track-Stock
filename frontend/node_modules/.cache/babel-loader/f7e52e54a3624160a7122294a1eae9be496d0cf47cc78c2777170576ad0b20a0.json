{"ast":null,"code":"var _jsxFileName = \"/Users/childeric/Documents/projects/supply-chain-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient.js';\nimport Auth from './auth.js';\nimport Dashboard from './dashboard.js';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // state to hold user session information\n  const [session, setSession] = useState(null);\n  useEffect(() => {\n    // Fetches the current session on app load\n    supabase.auth.getSession().then(({\n      data: {\n        session\n      }\n    }) => {\n      setSession(session);\n    });\n\n    // Subscribes to authentication state changes\n    // This listener updates the session state automatically\n    // when a user logs in, logs out, or the session changes\n    const {\n      data: {\n        subscription\n      }\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n    });\n\n    // Unsubscribe from the listener when the component unmounts\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []); // Empty dependency array means this effect runs only once\n\n  // Render Auth component if there's no session, otherwise render Dashboard\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    style: {\n      padding: '50px 0 100px 0'\n    },\n    children: !session ? /*#__PURE__*/_jsxDEV(Auth, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(Dashboard, {\n      session: session\n    }, session.user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 30\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"my2JknXsLNPscnT9b+5uRmb6O9A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","supabase","Auth","Dashboard","jsxDEV","_jsxDEV","App","_s","session","setSession","auth","getSession","then","data","subscription","onAuthStateChange","_event","unsubscribe","className","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","user","id","_c","$RefreshReg$"],"sources":["/Users/childeric/Documents/projects/supply-chain-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { supabase } from './supabaseClient.js';\nimport Auth from './auth.js';\nimport Dashboard from './dashboard.js';\nimport './App.css';\n\nfunction App() {\n  // state to hold user session information\n  const [session, setSession] = useState(null);\n\n  useEffect(() => {\n    // Fetches the current session on app load\n    supabase.auth.getSession().then(({ data: { session } }) => {\n      setSession(session);\n    });\n\n    // Subscribes to authentication state changes\n    // This listener updates the session state automatically\n    // when a user logs in, logs out, or the session changes\n    const {\n      data: { subscription },\n    } = supabase.auth.onAuthStateChange((_event, session) => {\n      setSession(session);\n    });\n\n    // Unsubscribe from the listener when the component unmounts\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []); // Empty dependency array means this effect runs only once\n\n  // Render Auth component if there's no session, otherwise render Dashboard\n  return (\n    <div className=\"container\" style={{ padding: '50px 0 100px 0' }}>\n      {!session ? <Auth /> : <Dashboard key={session.user.id} session={session} />}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACAC,QAAQ,CAACS,IAAI,CAACC,UAAU,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MAAEC,IAAI,EAAE;QAAEL;MAAQ;IAAE,CAAC,KAAK;MACzDC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;;IAEF;IACA;IACA;IACA,MAAM;MACJK,IAAI,EAAE;QAAEC;MAAa;IACvB,CAAC,GAAGb,QAAQ,CAACS,IAAI,CAACK,iBAAiB,CAAC,CAACC,MAAM,EAAER,OAAO,KAAK;MACvDC,UAAU,CAACD,OAAO,CAAC;IACrB,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACXM,YAAY,CAACG,WAAW,CAAC,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACEZ,OAAA;IAAKa,SAAS,EAAC,WAAW;IAACC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAiB,CAAE;IAAAC,QAAA,EAC7D,CAACb,OAAO,gBAAGH,OAAA,CAACH,IAAI;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGpB,OAAA,CAACF,SAAS;MAAuBK,OAAO,EAAEA;IAAQ,GAAlCA,OAAO,CAACkB,IAAI,CAACC,EAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAqB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzE,CAAC;AAEV;AAAClB,EAAA,CA/BQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AAiCZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}